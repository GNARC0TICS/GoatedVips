# GoatedVips Project Rules

## API Integration

### Token Management
- Always use the centralized `getApiToken()` function from `server/utils/api-token.ts` for token retrieval
- Never hardcode API tokens directly in service or component files
- Log token-related errors with appropriate context for debugging
- Use the `validateApiToken()` function before critical API operations

### Error Handling
- Use standardized error handling patterns for API requests
- Implement retry logic for transient API failures
- Log API errors with request context for troubleshooting
- Return user-friendly error messages while preserving technical details for logs

### Data Synchronization
- Prefer incremental updates over full dataset synchronization when possible
- Include timestamps in synchronization data for conflict resolution
- Log synchronization activities with clear metrics (items processed, success/failure counts)
- Implement safeguards against data loss during synchronization

## Coding Patterns

### TypeScript Usage
- Use strong typing for all variables and function parameters
- Define interfaces for all data structures, especially API responses
- Leverage TypeScript utility types for type transformations
- Use enums for predefined sets of values (e.g., user statuses, permission levels)

### Service Architecture
- Implement service layer as the primary business logic container
- Keep controllers thin, focused on request/response handling
- Use dependency injection pattern for service dependencies
- Maintain clear separation between data access and business logic

### Frontend Patterns
- Use React hooks for state management and side effects
- Implement container/presentational component pattern
- Use React Query for server state management
- Keep components focused on a single responsibility

### Testing Approach
- Write unit tests for critical business logic
- Implement integration tests for API endpoints
- Use test fixtures for consistent test data
- Mock external dependencies in unit tests

## Database Conventions

### Schema Design
- Use SQL conventions for table and column names (snake_case)
- Include audit fields (created_at, updated_at) on all tables
- Define explicit primary keys and foreign key relationships
- Use appropriate indexes for frequently queried fields

### Data Access
- Use Drizzle ORM for database operations
- Centralize database queries in repository pattern
- Implement data validation before database operations
- Use transactions for operations affecting multiple tables

## Security Considerations

### Authentication
- Use secure HTTP-only cookies for session management
- Implement proper CSRF protection
- Apply appropriate password hashing and salting
- Use proper JWT validation and expiration

### API Security
- Validate all user input before processing
- Apply rate limiting to prevent abuse
- Implement proper authentication for all API endpoints
- Use HTTPS for all external communication
- ABSOLUTELY NO MOCK DATA CREATION/IMPLMENTATION

## Project Workflow

### Git Workflow
- Use feature branches for all new development
- Follow conventional commits for commit messages
- Require pull request reviews before merging
- Keep pull requests focused on single features/fixes

### Documentation
- Update API documentation when endpoints change
- Document complex business logic with comments
- Maintain up-to-date README for project setup
- Document environment variables and configuration options
