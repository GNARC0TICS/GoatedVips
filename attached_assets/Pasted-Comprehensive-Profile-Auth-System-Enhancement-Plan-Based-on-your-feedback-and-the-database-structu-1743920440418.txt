Comprehensive Profile & Auth System Enhancement Plan
Based on your feedback and the database structure, I've developed a plan to address the authentication inefficiencies, profile structure improvements, and the possibility of an achievement system within your current data constraints.

1. Authentication Improvements
Profile Owner vs. Visitor Distinction
// Inside UserProfile.tsx
import { useAuth } from '@/hooks/use-auth';

// Add this to determine profile ownership
const { user: currentUser } = useAuth();
const isOwnProfile = currentUser?.id === parseInt(userId);

// Then conditionally render editing controls
{isOwnProfile ? (
  <div className="mt-4">
    <EditProfileDialog user={user} onUpdate={refetch} />
    {/* Additional owner-only features */}
  </div>
) : (
  <div className="mt-4">
    {/* Visitor-only actions (follow, message, etc.) */}
    <Button variant="outline" size="sm">Follow</Button>
  </div>
)}
Centralized Auth Token Handling
Your newly created authService.ts handles this well, but needs to be integrated throughout the app consistently. We should:

Refactor all components to use the service
Implement token refresh logic
Add proper session expiration handling
2. Profile Structure Fortification
Unified Profile Data Service
// Using the profileService we've created to consolidate data fetching
export async function getCompleteUserProfile(userId: string): Promise<UserProfile> {
  // Fetch user data and stats in parallel
  const [userData, statsData] = await Promise.all([
    fetchUserProfile(userId),
    fetchUserStats(userId)
  ]);
  
  // Merge data with type safety
  return {
    ...userData,
    ...statsData,
    tier: statsData.tier || getTierFromWager(statsData.totalWagered)
  };
}
Enhanced Profile Component Structure
üìÅ client/src/components/profile/
‚îú‚îÄ‚îÄ ProfileHeader.tsx       # Avatar, name, verification badge
‚îú‚îÄ‚îÄ ProfileStats.tsx        # Wager statistics display
‚îú‚îÄ‚îÄ ProfileTierProgress.tsx # Tier visualization
‚îú‚îÄ‚îÄ ProfileAchievements.tsx # Achievement display
‚îú‚îÄ‚îÄ ProfileActions.tsx      # Conditional actions (edit, follow)
‚îî‚îÄ‚îÄ ProfileLayout.tsx       # Overall layout container
This modular approach would reduce redundancy between QuickProfileCard and UserProfile.

3. Achievement System Based on Available Data
Since we're limited to the data provided by the API, we can implement a strategic achievement system based on wagering milestones and tier progression:

Achievement Types from Current Data
// New schema extension
export interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  dateEarned?: string;
  progress?: number; // 0-100
  category: 'wager' | 'tier' | 'loyalty' | 'special';
}

// Achievement storage in user record
// Using the customization JSONB field that already exists
type UserCustomization = {
  achievements?: Achievement[];
  unlockedAchievements?: string[]; // Achievement IDs
  // Other customization options
};
Achievement Categories
Wager Milestones (Based on all_time data)

"High Roller" - Wager $10,000 all-time
"Super Roller" - Wager $100,000 all-time
"Legendary Roller" - Wager $1,000,000 all-time
Consistency Achievements (Based on week/month data)

"Weekly Champion" - Wager $X for 4 consecutive weeks
"Monthly Devotee" - Wager $Y every month for 3 months
Tier Progression

Achievement for each tier reached
Special achievement for maintaining a tier for X period
Implementation Strategy
Create an achievement check system that runs:

After API data sync
On user login
On manual refresh
Store achievement progress in the customization JSONB field:

// Example structure in customization field
{
  "achievements": {
    "wagerMilestones": {
      "highRoller": { "earned": true, "date": "2023-04-01" },
      "superRoller": { "progress": 45 } // 45% complete
    },
    "tierAchievements": {
      "goldTier": { "earned": true, "date": "2023-02-15" }
    }
  }
}
Display achievements on profile:
<Card className="bg-[#1A1B21] border-[#2A2B31]">
  <CardContent className="p-6">
    <h2 className="text-xl font-bold mb-4 flex items-center">
      <Trophy className="mr-2 h-5 w-5 text-[#D7FF00]" />
      Achievements
    </h2>
    
    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
      {user.customization?.achievements?.map(achievement => (
        <AchievementCard 
          key={achievement.id}
          achievement={achievement}
          locked={!achievement.dateEarned}
        />
      ))}
    </div>
  </CardContent>
</Card>
Leveraging activityLogs
I noticed your schema includes an activityLogs JSONB field. We could enhance this to track:

Wager race participations and placements
Tier promotions and duration at each tier
Consecutive days/weeks active
This would give us more data for interesting achievements without modifying the schema.

Implementation Priority
Phase 1 - Core Auth & Profile Fixes

Implement profile owner vs visitor distinction
Fix Edit Profile permission issue
Consolidate profile data fetching
Phase 2 - Profile Component Restructuring

Create modular profile components
Implement shared styles and visualizations
Improve navigation between profile views
Phase 3 - Achievement System

Design achievement categories and rules
Implement achievement check system
Create achievement visualization components