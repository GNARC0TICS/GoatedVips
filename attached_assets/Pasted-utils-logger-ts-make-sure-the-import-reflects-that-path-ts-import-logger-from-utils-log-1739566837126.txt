utils/logger.ts`, make sure the import reflects that path: ```ts import { logger } from './utils/logger'; // If the file is in the utils directory ``` 3. **Module Resolution:** If you're using TypeScript, make sure there are no issues with module resolution. Ensure your `tsconfig.json` is configured correctly. You might also want to check that the module extensions are properly recognized by Node.js or TypeScript. 4. **Verbose Logging for tsx:** Since you're using `tsx`, try adding more verbose logging or using the `--trace-warnings` flag to pinpoint where the issue occurs exactly. 5. **Ensure Proper Build/Compile:** If you’ve modified the code recently, make sure everything is built properly. Sometimes errors like this can happen if the build of your TypeScript project didn’t complete correctly. You can force a rebuild with: ```bash npx tsc --build ``` 6. **Dependencies/Symlinks:** If your `server/utils/logger` is an external module or symlink, try running `npm install` again in case something is missing: ```bash npm install ``` After you resolve the module path issue or create the missing file, try running the server again with `npm run dev`. This should resolve the `ERR_MODULE_NOT_FOUND` issue. for 8 seconds
It looks like your code is trying to import eq from "drizzle-orm/pg-core", but that module doesn’t export eq in your version of Drizzle ORM. You’ll need to adjust the import. Typically, you can import eq (and sql) directly from "drizzle-orm" instead of "drizzle-orm/pg-core".

For example, if you currently have:

import { eq, sql } from "drizzle-orm/pg-core";
Change it to:

import { eq, sql } from "drizzle-orm";
Make sure you update any other file that might be importing from "drizzle-orm/pg-core" if they need the same functionality.

Also, double-check your package version and Drizzle ORM documentation to ensure that the exports match your usage. Once you update the import, your server should be able to resolve eq properly.

Give that a try and then restart your server with npm run dev.