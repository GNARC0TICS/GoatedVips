Current Implementation Analysis
User Registration Flow
Frontend Registration:

The AuthModal.tsx component handles user registration UI
Uses Zod for validation (username, email, password)
Registration state is managed through useAuth hook
No UI for linking Goated.com accounts during registration
Backend Registration:

Handled in server/auth.ts through the /api/register endpoint
Creates users in the database with email verification
Password hashing uses scrypt with salt
No direct connection to Goated.com accounts during registration
Automatic User Creation
API Integration:

server/utils/api-utils.ts connects to Goated.com API
findUserByGoatedId retrieves users from Goated.com leaderboard
ensureUserProfile in server/index.ts (400+ lines) handles profile creation
System creates placeholder accounts for all leaderboard users
Account Types:

Regular user accounts (directly registered)
"Official" profiles (permanent, created from API data)
Temporary profiles (placeholder without verified API data)
Custom profiles (non-numeric IDs)
Account Linking
Current Process:
No clear UI/flow for users to claim their Goated.com accounts
QuickProfile.tsx has endpoint call to ensure-profile-from-id
User linking logic is scattered across multiple files
Relies on Goated ID verification but implementation is unclear
Key Issues Identified
Code Organization Problems:

The key ensureUserProfile function is buried in server/index.ts (server startup file) rather than in a dedicated service
Multiple similar but slightly different user creation functions across files
Inconsistent error handling and logging
User Experience Issues:

No clear UI flow for users to claim/link their Goated.com accounts
Multiple account types with different properties creates confusion
Limited visibility into account linking status
Technical Debt:

Large monolithic functions (400+ lines)
Mixed responsibilities (server startup code handling user creation)
Duplicate logic for profile image handling, but commented out as "temporarily disabled"
Proposed Cleanup Plan
Centralize User Management:

Create a dedicated UserService module to handle all user operations
Move ensureUserProfile out of server/index.ts
Standardize user creation/lookup functions
Simplify Account Types:

Reduce to just two types: direct registration and API-sourced
Add clear status flags: isVerified, isLinked, sourceType
Streamline Account Linking:

Create a clear UI flow for account claiming
Implement a verification system requiring Goated ID
Add proper linking/unlinking capabilities