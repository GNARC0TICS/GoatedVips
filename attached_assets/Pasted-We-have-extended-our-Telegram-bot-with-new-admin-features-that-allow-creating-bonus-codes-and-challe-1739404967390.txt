We have extended our Telegram bot with new admin features that allow creating bonus codes and challenges. These features require corresponding database tables to store bonus code and challenge details. The data saved should be structured so that it can integrate seamlessly with our web pages—BonusCodes.tsx and Challenges.tsx.

In our current setup, Goated user data is displayed using a specific format (e.g., UID and name). Please ensure that the new tables and any data transformations match our existing setup. If our bonus code and challenge tables already exist, please integrate the new functionality with them. Additionally, the solution should expose data in a format that our web pages can easily consume, ideally by sharing common API endpoints or data access layers.

Full Prompt for the Replit Agent
Please integrate the new bonus codes and challenges functionality with our database and existing web pages as follows:

Database Tables:
telegramUsers
Purpose: Store Telegram-specific user details.
Fields (example):
telegramId (primary key)
telegramUsername
UID (foreign key to our Goated user data)
isVerified (boolean)
verifiedAt (timestamp)
verifiedBy (admin identifier)
verificationRequests
Purpose: Track pending verification requests.
Fields (example):
id (primary key)
telegramId
telegramUsername
UID (foreign key to our Goated user data)
status (e.g., 'pending', 'approved', 'rejected')
requestedAt (timestamp)
(Optional) verifiedAt and verifiedBy
users
Purpose: Store our core Goated user data.
Fields (example):
UID (primary key, matching our current setup)
name (the user’s display name)
Other fields as needed.
bonusCodes
Purpose: Store bonus code details created via Telegram.
Suggested Fields:
id (primary key)
bonusAmount (numeric or string, as needed)
requiredWager (numeric or string)
totalClaims (integer)
bonusCode (string)
claimsCount (integer, default 0)
createdAt and updatedAt (timestamps)
(Optional) A flag to indicate if the bonus code is active, or a reference linking it to a challenge.
challenges
Purpose: Store challenge details created via Telegram.
Suggested Fields:
id (primary key)
game (string – e.g., "GOAT RUN", "G3 TOWER", etc.)
minBet (numeric or string)
multiplier (numeric)
prize (numeric or string)
numClaims (integer)
timeframe (timestamp or string for the challenge deadline)
bonusCode (string – the bonus code tied to the challenge)
status (e.g., 'created', 'launched', 'expired')
createdAt and updatedAt (timestamps)
(Optional) A reference to the admin who created the challenge.
(Optional) Moderation/Warnings Table:
If desired, create a table to persist warnings and moderation actions with fields such as:
id (primary key)
chatId
userId
action (e.g., "warn", "ban", "mute")
timestamp
reason (optional)
Data Integration and Transformation:
Ensure that bonus code and challenge data created via the Telegram bot is saved into the corresponding tables.
Transform and expose the bonus code and challenge data in a format that matches our current Goated user data display (using fields like UID and name).
If bonus code and challenge tables already exist, integrate our new bot functionality with them so that updates (such as launching a challenge or creating a bonus code) are reflected across our system.
Web Page Integration:
BonusCodes.tsx and Challenges.tsx should fetch and render data from the bonusCodes and challenges tables.
Please integrate these new tables with our existing web pages so that when an admin creates or launches a new challenge or bonus code via Telegram, the corresponding pages automatically display the updated data.
If possible, create shared API endpoints or data access layers that can be used by both the Telegram bot and the web pages, ensuring data consistency.
Integration Request
Could you please integrate the new bonusCodes and challenges tables with our existing BonusCodes.tsx and Challenges.tsx pages? The data should be transformed to match our current setup (e.g., using UID and name as in our Goated user data). The goal is to allow bonus codes and challenges created or updated via Telegram to be reflected immediately on the web pages. If bonusCodes and challenges tables already exist, please work to make the new Telegram bot data work together with them.