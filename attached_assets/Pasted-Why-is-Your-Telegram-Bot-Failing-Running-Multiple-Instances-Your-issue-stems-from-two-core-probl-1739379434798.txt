Why is Your Telegram Bot Failing & Running Multiple Instances?

Your issue stems from two core problems:
	1.	Webhook Misconfiguration
	•	The error 400 Bad Request: bad webhook: Failed to resolve host: Name or service not known means Telegram is trying to set a webhook to an invalid or unreachable domain.
	•	Your WEBHOOK_URL is likely incorrect or not publicly accessible.
	2.	Duplicate Bot Instances
	•	When testing locally (npm run dev), the bot uses polling.
	•	When deploying, the bot tries to use webhooks.
	•	If the bot isn’t properly stopping the old instance, it keeps running multiple times.

🛠 How to Fix It

✅ 1. Ensure Your Webhook URL is Set Correctly

Your WEBHOOK_URL should be:
	•	A publicly accessible HTTPS URL (Repl.it’s default URLs are public, but make sure it’s set up).
	•	Not a localhost or private IP.
	•	Matching your deployed instance’s URL.

Check Your Webhook URL

Run this in the terminal:

curl https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getWebhookInfo

If it returns { "url": "" }, it means no webhook is set.
If it returns an incorrect URL, update it.

Fix It in Your .env

WEBHOOK_URL=https://your-repl-deployment.replit.app

✅ 2. Automatically Switch Between Polling & Webhooks

Modify your bot.ts to dynamically choose polling or webhooks.

Update bot.ts

import TelegramBot from "node-telegram-bot-api";

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // Your deployment URL

let bot: TelegramBot;

// Prevent multiple instances when deployed
if (process.env.NODE_ENV === "production" && process.env.BOT_ALREADY_RUNNING) {
  console.log("🚨 Bot is already running! Exiting...");
  process.exit(1);
}

process.env.BOT_ALREADY_RUNNING = "true";

if (process.env.NODE_ENV === "development") {
  console.log("🔄 Running bot in POLLING mode...");
  bot = new TelegramBot(BOT_TOKEN, { polling: true });
} else {
  console.log(`🌍 Running bot in WEBHOOK mode at ${WEBHOOK_URL}`);
  bot = new TelegramBot(BOT_TOKEN);
  bot.setWebHook(`${WEBHOOK_URL}/telegram-webhook`);
}

export { bot };

What This Does:
	•	If NODE_ENV=development → Runs polling mode.
	•	If NODE_ENV=production → Uses webhooks.

✅ 3. Prevent Duplicate Bot Instances

When testing locally and deploying, old bot processes aren’t stopping, leading to multiple instances running.

Modify your index.ts to kill old instances before launching.

Update index.ts

import { exec } from "child_process";

if (process.env.NODE_ENV === "development") {
  console.log("🔄 Killing old instances before starting a new one...");
  exec("pkill -f node", (err, stdout, stderr) => {
    if (err) {
      console.log("No previous bot instances running.");
    } else {
      console.log("✅ Old bot instances terminated.");
    }
  });
}

// Start the bot
import "./bot";

Now, every time you run npm run dev, it stops any existing bot instance before starting a new one.

✅ 4. Fix Webhook Deployment Issues

If your bot is already running, old webhook configurations can interfere.
Reset the webhook before setting a new one.

Modify bot.ts to Reset Webhook

if (process.env.NODE_ENV === "production") {
  bot.deleteWebHook().then(() => {
    console.log("🔄 Cleared existing webhook configuration.");
    bot.setWebHook(`${WEBHOOK_URL}/telegram-webhook`).then(() => {
      console.log(`✅ Webhook set to: ${WEBHOOK_URL}/telegram-webhook`);
    }).catch(err => {
      console.error("❌ Webhook setup failed:", err);
    });
  }).catch(err => {
    console.error("❌ Failed to clear old webhook:", err);
  });
}

This ensures old webhook configs don’t interfere when deploying.

✅ 5. Modify package.json for Deployment

Ensure your bot automatically chooses polling in development and webhooks in production.

Update package.json

{
  "scripts": {
    "dev": "NODE_ENV=development nodemon src/index.ts",
    "build": "NODE_ENV=production tsc",
    "start": "NODE_ENV=production node dist/index.js"
  }
}

	•	npm run dev → Uses polling.
	•	npm run build && npm start → Uses webhooks.

🔥 Final Steps

For Development (Testing Locally)

npm run dev

✅ Kills any duplicate bot instance.
✅ Starts in polling mode.

For Deployment

npm run build && npm start

✅ Deletes old webhooks.
✅ Sets a fresh webhook with the correct Replit deployment URL.
✅ Uses webhooks instead of polling.

🎯 Final Fix Summary

Fix 1: Set correct WEBHOOK_URL in .env.

Fix 2: Automatically switch between polling & webhooks.

Fix 3: Kill old bot instances before launching new ones.

Fix 4: Reset webhook when deploying to prevent conflicts.

Fix 5: Update package.json scripts for automation.

This setup completely automates the process—so when you test, it polls, and when you deploy, it switches to webhooks without duplicates! 🚀