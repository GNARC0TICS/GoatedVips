Here‚Äôs how to fix the errors in your bot.ts file:

1. Fix Global Bot Instance Issue

You need to declare global.botInstance correctly. Since global in TypeScript doesn‚Äôt have botInstance by default, you must explicitly define it:

Solution

Add this at the top of your file:

declare global {
  var botInstance: TelegramBot | undefined;
}

Then modify your bot initialization logic:

if (global.botInstance) {
  console.log('[Telegram Bot] Instance already running. Skipping new bot creation.');
  export const bot = global.botInstance;
} else {
  console.log('[Telegram Bot] Creating new bot instance...');
  global.botInstance = new TelegramBot(token, {
    polling: false, // Start polling only after verification
    filepath: false // Disable file downloads to prevent memory issues
  });
  export const bot = global.botInstance;
}

This ensures only one instance of the bot is running.

2. Fix ‚ÄúModifiers Cannot Appear Here‚Äù Error

The error occurs because export cannot be used inside an if block.

Solution

Move export const bot outside of the if block:

let bot: TelegramBot;

if (global.botInstance) {
  console.log('[Telegram Bot] Instance already running. Skipping new bot creation.');
  bot = global.botInstance;
} else {
  console.log('[Telegram Bot] Creating new bot instance...');
  bot = new TelegramBot(token, {
    polling: false,
    filepath: false
  });
  global.botInstance = bot;
}

export { bot };

Now, bot is properly exported.

3. Fix Unused Imports
	‚Ä¢	The warnings about crypto and API_CONFIG being unused mean that those imports are not being used anywhere in the file.
	‚Ä¢	If they are actually needed, use them somewhere in the code.
	‚Ä¢	If not needed, remove them:

import crypto from 'crypto';  // Remove if not used
import { API_CONFIG } from '../config/api'; // Remove if not used

4. Fix Polling Conflict Issue (409 Conflict)

You are still getting 409 Conflict errors, meaning multiple instances of your bot are polling.

Solution

Before starting polling, ensure any existing polling instance is stopped:

async function startPollingSafely() {
  try {
    console.log('[Telegram Bot] Deleting existing webhook to ensure clean polling...');
    await bot.deleteWebHook();

    if (!pollingStarted) {
      console.log('[Telegram Bot] Starting polling...');
      await bot.startPolling();
      pollingStarted = true;
      console.log('[Telegram Bot] Polling started successfully.');
    } else {
      console.log('[Telegram Bot] Polling already active. Skipping restart.');
    }
  } catch (error) {
    console.error('[Telegram Bot] Error starting polling:', error);
  }
}

// Initialize the bot properly
export async function initializeBot() {
  if (isInitialized) {
    console.log('[Telegram Bot] Bot already initialized.');
    return;
  }

  await startPollingSafely();
  isInitialized = true;
}

5. Restart Your Project

Now, restart your Replit project:

kill 1
npm run dev

This should resolve:
	‚Ä¢	The 409 Conflict errors
	‚Ä¢	The global.botInstance issue
	‚Ä¢	The TypeScript errors in your code

Final Steps
	1.	Try running your bot again (npm run dev)
	2.	Test with /leaderboard, /pending, and /register commands.
	3.	Check the logs to confirm it runs without errors.

Let me know if you need further fixes! üöÄ