1. Environment & Configuration Setup
A. Environment Variables

Make sure your Replit environment includes all necessary environment variables. At a minimum, you should set:

API_TOKEN – The token for authenticating with the Goated.com Affiliate API.
DATABASE_URL – The connection string for your PostgreSQL database.
PORT – The port on which your Node/Express server should run (if needed; Replit might use a default port like 5000).
Any other secrets required by your Telegram bot (e.g., TELEGRAM_BOT_TOKEN).
Tip: In Replit’s Secrets tab, add all these keys with their corresponding values.

B. Project Structure Verification

Ensure that your frontend code is in the correct directory. If your Vite configuration expects your entry file to be in /src/main.tsx, verify that the file exists or adjust the vite.config.ts with the proper root (e.g., if your frontend code lives in client/).
Confirm that your backend code (Express, WebSocket, etc.) is located in the server/ folder.
C. Dependencies

Run the following command in the Replit shell to install all dependencies:

npm install
Ensure that your package.json includes:

Express, tsx, drizzle-orm, rate-limiter-flexible, etc.
Vite and any React plugins (if your frontend uses React).
2. Code Preparation & Final Adjustments
A. Leaderboard Data Transformation

Verify that the updated transformRawLeaderboardData function in your backend (server/utils/leaderboard.ts) is in place. It must guarantee that every user object has a defined wagered property with default values (0) for:

today
this_week
this_month
all_time
This avoids errors when calling .toLocaleString() on undefined values in the frontend.

B. API Endpoints

Confirm that your /api/affiliate/stats endpoint is updated to:

Fetch the raw data from the external API with the appended query parameter ?raw=true
Transform the raw data using transformRawLeaderboardData
Return a JSON structure matching the front-end expectations.
Also, verify that your other endpoints (e.g., /api/wager-races/current, /api/admin/analytics, and Telegram bot endpoints) have no errors.

C. Telegram Bot Integration

Check that the Telegram bot is initialized in your backend (in server/telegram/bot.ts or similar).
Confirm that environment variables (like TELEGRAM_BOT_TOKEN) are properly set.
Make sure your code logs a success message on bot initialization.
Test bot commands (if any) locally before deployment.
D. WebSocket and Rate Limiting

Verify that your WebSocket server configuration is intact and that your routes for real-time leaderboard updates are included.
Check that your rate limiting and caching middleware are functioning properly to prevent abuse and ensure performance.
3. Testing Procedures
A. Local Testing (via Replit Shell or Local Environment)

Run the Server
Start your server using:
npm run dev
Confirm that the server logs indicate:

Successful database connection.
WebSocket initialization and Telegram bot startup.
No critical errors (e.g., missing modules or API errors).
Test REST API Endpoints
Use tools like Postman, cURL, or Replit’s built-in HTTP client to verify:
Health Check:
curl http://localhost:<PORT>/api/health
Affiliate Stats (Leaderboard):
curl http://localhost:<PORT>/api/affiliate/stats
Ensure that the response JSON includes data for today, weekly, monthly, and all_time with correctly sorted arrays.
Wager Races:
Test /api/wager-races/current to see if it returns current race data.
Analytics:
Test /api/admin/analytics for proper totals.
Telegram Bot:
If possible, trigger a test command (or check logs) to verify the bot is working.
Frontend Testing
Run your Vite development server (if separate) or verify that your frontend builds without error.
Open the URL (e.g., http://localhost:<frontend_port>) in your browser.
Check that the leaderboard component displays data without errors (i.e., no “Cannot read properties of undefined” errors).
B. Cross-Platform & Integration Testing

WebSocket Updates:
Use a WebSocket client (or browser console) to connect to ws://localhost:<PORT>/ws/leaderboard and check that connection messages (like "CONNECTED") are received.
Cache & Rate Limits:
Make repeated requests to check that the caching headers are set (X-Cache: HIT/MISS) and that rate limiting is not prematurely blocking valid traffic.
4. Deployment on Replit
A. Replit Configuration

In your Replit project’s “Secrets” section, ensure that all environment variables are set as described above.
Configure the Replit “Run” command (if needed) to run your server. For example, your run command might be:
npm run dev
Set up port forwarding as needed. For example, if you have:
External Port 5000 → Internal Port 80 (for the main HTTP server)
External Port 5001 → Internal Port 3000 (if the frontend runs on a separate port)
Verify that your Replit project settings reflect these mappings.
B. Final Deployment Checks

Build and Serve the Frontend (if applicable):
If you’re using Vite for your frontend, ensure that the build output is properly serve...