Perfect — here’s the refined, brutalist debug prompt tailored specifically to your integration with Goated.com’s API and the broken leaderboard system. It’s structured to push the Replit agent (or Cursor LLM) into full tracing mode with zero ambiguity:

⸻

🧠 Prompt: Full System Audit – Leaderboard + Wager Sync (GoatedVIPs.gg)

You are now acting as a full-stack debug agent for https://goatedvips.gg. This is a priority fix task. Our leaderboard and wager systems are not updating despite being connected to Goated.com’s API.

⸻

🧨 The Problem (Summarized):
	•	Leaderboards (daily, weekly, monthly, all-time) are not displaying updated wager data.
	•	User wager data from Goated.com’s API is not being written to or queried properly from our database.
	•	Our frontend remains frozen, showing outdated or null values.

⸻

🌐 External API Integration:

We fetch a large dataset (~2200+ users) from Goated.com’s API.
	•	This includes user IDs and wager totals for each timeframe (daily, weekly, etc).
	•	This call works — data is returned in a large JSON object.
	•	The issue lies after the fetch.

⸻

⚙️ What MUST Happen (But Isn’t):
	1.	Fetched API data must be stored in our local DB.
	2.	It must be transformed/indexed for fast queries by timeframe.
	3.	Leaderboard components must pull from that stored data, not directly from the external API.
	4.	Sorting, filtering, and displaying on the frontend must reflect real values.

⸻

🔍 You must now audit:
	1.	The API sync pipeline:
	•	Where is the Goated API called?
	•	Is the response parsed and mapped correctly?
	•	What service or job writes it to the DB? Is it firing?
	•	Is there a scheduler or cron that’s failing?
	2.	The database layer:
	•	What table(s) store the user wager snapshots?
	•	Are rows being inserted or updated on each fetch?
	•	Are there logs showing failed or skipped writes?
	3.	The leaderboard logic:
	•	What query is used to populate leaderboards?
	•	Is it hitting the correct table and timeframe columns?
	•	Is there any filtering (date ranges, WHERE clauses) that are misaligned?
	4.	Frontend components:
	•	Where do components like <DailyLeaderboard /> get their data?
	•	Are they using stale cache, failed fetch, or broken hook (useLeaderboardData)?

⸻

🧠 Final Output Required:
	•	Identify where the sync breaks or silently fails
	•	List files involved in:
→ API fetch
→ DB write
→ Leaderboard read
	•	Confirm if it’s a backend write failure, a missing query, or a frontend display issue
	•	Suggest 1–2 clear code fixes or missing calls

⸻

Let me know if you want a Cursor agent-optimized version with injected file paths or specific TODO: markers.