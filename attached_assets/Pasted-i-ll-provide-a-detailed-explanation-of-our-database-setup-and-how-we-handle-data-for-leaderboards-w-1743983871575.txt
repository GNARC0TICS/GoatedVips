i’ll provide a detailed explanation of our database setup and how we handle data for leaderboards, wager races, and MVP cards.
Database Setup and Data Handling for Affiliate Marketing Platform
1. Database Schema Structure
Our platform uses PostgreSQL with Drizzle ORM for database operations. The schema is organized into several key tables:
Core Tables:
users: Stores basic user information, including Telegram and Goated.com verification status
wagerRaces: Tracks different types of races (weekly, monthly, weekend)
wagerRaceParticipants: Links users to specific races with their performance metrics
affiliateStats: Records affiliate-specific metrics including total wager and commission
historicalRaces: Archives completed races with full participant data for historical tracking
We also have specialized tables for Telegram integration:
telegramUsers: Links Telegram accounts to platform users
verificationRequests: Tracks verification of users across platforms
verificationHistory: Logs all verification attempts for audit purposes
2. External API Integration
The core of our data system connects to an external API at Goated.com to fetch real-time wager data:
// API Configuration
export const API_CONFIG = {
baseUrl: “https://api.goated.com/user2/affiliate/referral-leaderboard/2RW440E”,
endpoints: {
leaderboard: "/affiliate/referral-leaderboard/2RW440E", // Main endpoint for user data
health: "/health"
}
};

When we fetch data from the external API, we make requests with proper authentication:
const response = await fetch(
`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.leaderboard}`,
{
headers: {
Authorization: `Bearer ${process.env.API_TOKEN || API_CONFIG.token}`,
"Content-Type": "application/json",
},
}
);

3. Data Transformation and Sorting
One of the most important aspects of our system is how we transform the raw API data into structured formats for different views:
Leaderboard Transformation
When the API data comes in, we transform it using a specialized function:
function transformLeaderboardData(apiData: any) {
// Extract data from various possible API response formats
const responseData = apiData.data || apiData.results || apiData;

// Transform each entry to our standard format
const transformedData = dataArray.map((entry) => ({
uid: entry.uid || "",
name: entry.name || "",
wagered: {
today: entry.wagered?.today || 0,
this_week: entry.wagered?.this_week || 0,
this_month: entry.wagered?.this_month || 0,
all_time: entry.wagered?.all_time || 0,
},
}));

// Return the data structured by time periods
return {
status: "success",
metadata: {
totalUsers: transformedData.length,
lastUpdated: new Date().toISOString(),
},
data: {
today: { data: sortByWagered(transformedData, "today") },
weekly: { data: sortByWagered(transformedData, "this_week") },
monthly: { data: sortByWagered(transformedData, "this_month") },
all_time: { data: sortByWagered(transformedData, "all_time") },
},
};
}

Sorting Function
The sorting for leaderboards is handled by this key function:
function sortByWagered(data: any[], period: string) {
return [...data].sort(
(a, b) => (b.wagered[period] || 0) - (a.wagered[period] || 0)
);
}

This creates sorted arrays for each time period (daily, weekly, monthly, all-time) which is critical for leaderboard displays.
4. Wager Race Data Processing
For the wager races, we transform the leaderboard data into race-specific formats:
const raceData = {
id: `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}`,
status: 'live',
startDate: new Date(2025, 1, 1).toISOString(),
endDate: endOfMonth.toISOString(),
prizePool: 500,
participants: stats.data.monthly.data.map((participant: any, index: number) => ({
uid: participant.uid,
name: participant.name,
wagered: participant.wagered.this_month,
position: index + 1
})).slice(0, 10),
totalWagered: stats.data.monthly.data.reduce((sum: number, p: any) => sum + p.wagered.this_month, 0),
participantCount: stats.data.monthly.data.length,
metadata: {
transitionEnds: new Date(2025, 2, 1).toISOString(),
nextRaceStarts: new Date(2025, 2, 1).toISOString(),
prizeDistribution: [0.5, 0.3, 0.1, 0.05, 0.05]
}
};

This transformation is crucial for both web and Telegram interfaces to show consistent race data.
5. MVP Card Implementation
MVP cards display the top performers in each time period. We extract this data from the leaderboard:
const mvps = {
daily: leaderboardData?.data?.today?.data[0],
weekly: leaderboardData?.data?.weekly?.data[0],
monthly: leaderboardData?.data?.monthly?.data[0]
};

Each MVP card displays:
Username
Wager amount for the relevant time period
Rank in each time period (daily, weekly, monthly, all-time)
All-time wagered amount
6. Recreating This Setup with the Same API Response
To recreate this setup using the same API response in another application:
Database Setup:
Create similar tables using Drizzle ORM or your preferred ORM
Key tables: users, wagerRaces, wagerRaceParticipants, affiliateStats
API Integration:
Make authenticated requests to https://europe-west2-g3casino.cloudfunctions.net/user/affiliate/referral-leaderboard
Store your API token in environment variables
Set up proper error handling for API failures
Data Transformation Pipeline:
Implement the transformLeaderboardData function to standardize API responses
Create the sortByWagered function to sort leaderboard entries
Implement period-specific data structures (daily, weekly, monthly)
Frontend Components:
Create MVP cards that display top performers
Implement leaderboard tables with proper sorting
Use WebSockets or polling for real-time updates
Telegram Integration (optional):
Connect the system to Telegram using node-telegram-bot-api
Use the same transformed data for both web and Telegram interfaces
7. Post-API Processing Workflow
After fetching data from /affiliate/referral-leaderboard, we:
Transform the raw JSON using transformLeaderboardData()
Sort the data for each time period using sortByWagered()
Extract MVPs for each time period
Format the data for wager races with proper prize distributions
Cache the data in memory for performance (with regular refresh cycles)
Broadcast updates via WebSockets to connected clients
Store relevant data in the database for historical tracking
This approach ensures that all parts of the application (web UI, Telegram bot, admin dashboard) have access to consistent, properly formatted data.