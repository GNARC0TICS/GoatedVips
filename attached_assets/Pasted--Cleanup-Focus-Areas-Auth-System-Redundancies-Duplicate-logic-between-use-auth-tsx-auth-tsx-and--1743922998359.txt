 Cleanup Focus Areas
Auth System
Redundancies:

Duplicate logic between use-auth.tsx, auth.tsx, and protected-route.tsx
Token verification repeated across files
Multiple implementations of auth checks
Organization Plan:

Extract common auth utilities to a single location
Create clear separation between auth logic and UI components
Add proper comments explaining the auth flow
Profile System
Redundancies:

Overlapping functionality in QuickProfile.tsx and QuickProfileCard.tsx
Data fetching logic embedded directly in components
Duplicate user data transformation logic
Organization Plan:

Move data fetching to services
Standardize profile display components
Document profile types and tier calculations
Admin System
Redundancies:

Domain checking logic scattered across files
Admin authentication mixed with route handling
Duplicate validation in multiple admin routes
Organization Plan:

Centralize admin auth checks
Document domain-specific routing
Organize admin routes logically
2. Code Organization Structure
📁 client/src/
├── 📁 components/
│   ├── 📁 auth/         # Auth-related components 
│   ├── 📁 profile/      # Profile components
│   └── 📁 admin/        # Admin components
├── 📁 hooks/            # Custom hooks
├── 📁 lib/              # Utilities & helpers
│   └── 📁 services/     # Business logic services
├── 📁 pages/            # Page components
└── 📁 types/            # TypeScript type definitions

📁 server/
├── 📁 config/           # Configuration
├── 📁 middleware/       # Express middleware
├── 📁 routes/           # API endpoints
├── 📁 services/         # Business logic
├── 📁 templates/        # Email templates
└── 📁 utils/            # Utility functions
3. Documentation Approach
I'll add comprehensive comments to explain:

Auth Flow: JWT creation, verification, and session management
Domain Logic: How the domain-specific routing works
Admin Security: Security mechanisms and domain restrictions
Profile Management: User profile types and verification flow
API Routes: Purpose and parameters for each endpoint
Example comment style:

/**
 * Authentication Middleware
 * 
 * Verifies the JWT token from either:
 * 1. Cookie: 'token' cookie for browser clients
 * 2. Authorization header: 'Bearer {token}' for API clients
 * 
 * If valid, attaches user to the request object.
 * If invalid, returns 401 Unauthorized.
 * 
 * @param {Request} req - Express request object
 * @param {Response} res - Express response object
 * @param {NextFunction} next - Express next middleware function
 */
4. Replit Agent Guide Structure
I'll create a comprehensive docs/replit-agent-guide.md with:

Project Overview:

Architecture summary
Key components and their relationships
Completed Cleanup:

Redundancies removed
Code reorganization done
Documentation added
Priority Implementation Tasks:

Authentication enhancements
Email verification completion
Admin security improvements
Performance optimizations
Deferred Tasks (for Phase 2):

Environment configuration
Caching implementation
Rate limiting
Advanced security features
Technical Debt & Issues:

Identified inefficiencies
Security concerns
Scalability considerations
