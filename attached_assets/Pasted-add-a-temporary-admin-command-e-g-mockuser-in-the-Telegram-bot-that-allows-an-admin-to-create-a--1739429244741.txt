add a temporary admin command (e.g. /mockuser) in the Telegram bot that allows an admin to create a dummy user or update an existing user’s wager amount. This command can help you simulate leaderboard changes on the fly during development.

How It Could Work
Command Format:
For example, the command might look like:
/mockuser @username 1234.56
Where @username is the target (or new) user, and 1234.56 is the custom wager amount.
Logic:
Lookup or Create:
Check if a user with that username exists in your users table.
If not, create a dummy user (with any default values as necessary).
Update Wager Data:
Update or insert a record in the leaderboard (or update the user’s data) with the custom wager amount.
Confirmation:
Return a confirmation message to the admin showing the updated data.
Security:
Limit this command to admins only so that it’s only used in the development/testing environment.
Example Code Snippet
Below is a rough example of what this might look like in your Telegram bot's command handler (assuming you're using Drizzle ORM):

// Admin command for creating or updating a dummy user for leaderboard testing
const handleMockUserCommand = async (msg: TelegramBot.Message, args: string[]) => {
  const chatId = msg.chat.id;
  if (!(await isUserGroupAdmin(chatId, msg.from!.id))) {
    return safeSendMessage(chatId, "❌ You must be a group admin to use this command.");
  }

  // Expecting command format: /mockuser @username wagerAmount
  if (args.length < 2) {
    return safeSendMessage(chatId, "Usage: /mockuser @username wagerAmount");
  }

  // Remove the '@' if present
  const username = args[0].replace('@', '').trim();
  const wagerAmount = parseFloat(args[1]);
  if (isNaN(wagerAmount)) {
    return safeSendMessage(chatId, "❌ Invalid wager amount.");
  }

  try {
    // Try to find the user in the database
    let [user] = await db
      .select()
      .from(users)
      .where(eq(users.username, username))
      .limit(1);

    if (!user) {
      // If user doesn't exist, create a dummy user
      const [newUser] = await db.insert(users)
        .values({
          username: username,
          email: `${username}@dummy.com`,
          password: "placeholder", // Ensure this is handled securely in production
          isAdmin: false,
        })
        .returning();
      user = newUser;
      log(`Created dummy user: ${username}`);
    }

    // Now update the user's wager amount on the leaderboard.
    // This assumes that there's a column (e.g., wagered) in the leaderboard table (or users table)
    // If it's in a separate leaderboard table, adjust accordingly.
    const [updatedUser] = await db.update(users)
      .set({
        wagered: wagerAmount,
        updatedAt: new Date(),
      })
      .where(eq(users.id, user.id))
      .returning();

    safeSendMessage(chatId, `✅ Updated ${username}'s wager to $${wagerAmount.toFixed(2)}`);
  } catch (error) {
    console.error("Error updating mock user:", error);
    safeSendMessage(chatId, "❌ Failed to update dummy user data.");
  }
};

// In your command handler, add:
case "/mockuser":
  await handleMockUserCommand(msg, args);
  break;
Next Steps
Integrate the Command:
Add the new /mockuser command in your Telegram bot's command routing.
Test Manually:
Use an admin account to send the /mockuser command and verify the changes are reflected in your database and leaderboard.