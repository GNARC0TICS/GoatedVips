Step 1: Clear Existing Processes and Environment
	1.	Stop Running Processes:
	•	If you’re working locally or on Replit, stop any running instances by using the “Stop” button in Replit or pressing Ctrl+C in your terminal.
	•	In a terminal, verify no stray Node.js processes remain:

ps aux | grep node

Identify any processes that belong to your app (e.g., running server/index.ts or similar) and kill them if necessary:

kill -9 <PID>


	2.	Clear Cache/Temporary Files:
	•	If your app uses any in-memory caches (such as rate-limiter caches), ensure they are cleared by restarting your environment.
	•	Remove temporary build files if needed (e.g., delete the dist or build folder).
	3.	Ensure Dependencies are Up to Date:
	•	Run:

npm install


	•	This will update any dependencies and ensure that your node_modules folder is fresh.

Step 2: Update Run Configuration
	1.	Set Your Startup Command:
	•	Update your run configuration (for example, in your .replit file or deployment script) to use the following command:

tsx --tsconfig tsconfig.json server/index.ts


	•	This command tells tsx to use your specified tsconfig.json and launch your server from server/index.ts.

	2.	Confirm Environment Variables:
	•	Verify that your essential environment variables (like TELEGRAM_BOT_TOKEN, INTERNAL_API_URL, etc.) are set correctly in your environment (Replit Secrets or your local .env file).

Step 3: Start the Application
	1.	Launch the Server:
	•	Run the command:

npm run dev


	•	Check your console/logs for messages indicating successful startup:
	•	Your server should log that it’s listening on the correct port (e.g., port 5000).
	•	Your Telegram bot should log a message such as “✅ Bot initialized successfully as @YourBotUsername” or similar.

	2.	Monitor for Errors:
	•	Ensure there are no command-line argument errors or other startup issues.
	•	The absence of errors like “No such option: –stdio” or similar indicates that your new run command is working properly.

Step 4: Test the Application

A. API Endpoints Testing
	1.	Internal API Health Check:
	•	Use cURL or Postman to hit the health endpoint (if available):

curl http://localhost:5000/api/health


	•	Verify that it returns a status like { status: "healthy" }.

	2.	Test Key Endpoints:
	•	For example, test the leaderboard endpoint:

curl http://localhost:5000/api/wager-races/current


	•	Confirm that the response is correctly transformed and that all required data (participants, startDate, endDate, etc.) is present.

B. Telegram Bot Testing
	1.	Start a Private Chat with the Bot:
	•	Open Telegram and find your bot.
	•	Send /start and check that the welcome message (with inline buttons) appears as designed.
	2.	Test Commands:
	•	/verify:
Send /verify YourUsername and verify that you get the proper verification instructions.
	•	/menu:
Check that /menu displays quick links with only the affiliate link for the /play command.
	•	/help:
Verify that the help command shows a clear list of commands.
	•	/status, /bonuscodes, /notifications:
Ensure these commands work and return the expected personalized responses.
	3.	Test Inline and Callback Queries:
	•	Interact with inline buttons (e.g., “My Status”, “Quick Links”) and verify that the bot updates messages as needed.
	•	Check that callback queries are processed, and the bot provides proper feedback (for example, editing messages to refresh data).
	4.	Admin Testing:
	•	Log in with your admin account (e.g., @xGoombas) and test admin-only commands:
	•	/pending to list verification requests.
	•	/broadcast and /group_message for sending announcements.
	•	/setrecurring and /stoprecurring to schedule and cancel recurring messages.
	•	Confirm that admin commands are inaccessible to non-admin users.
	5.	Challenge & Forwarding Testing (if applicable):
	•	Create a challenge using the designated admin command.
	•	Simulate user challenge submissions and verify that they are recorded.
	•	Test channel forwarding commands if you have them implemented.

Step 5: Final Review & Deployment Preparation
	1.	Review Logs:
	•	Go through your console logs for any warnings or errors.
	•	Verify that health checks pass, and all scheduled processes (e.g., recurring messages) run as expected.
	2.	Backup & Rollback Plan:
	•	Ensure your database is backed up.
	•	Confirm that you have a rollback plan in case issues arise post-deployment.
	3.	Deployment:
	•	Once all tests pass locally, prepare to deploy to your production environment.
	•	Monitor the deployment closely, and be ready to address any issues that may occur immediately after launch.