-- New Secure Database Schema for Goombas x Goated VIPs\n-- Designed for performance, security, and scalability\n\n-- Enable necessary extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\nCREATE EXTENSION IF NOT EXISTS \"btree_gin\";\n\n-- Drop existing tables if they exist (fresh start)\nDROP TABLE IF EXISTS race_participants CASCADE;\nDROP TABLE IF EXISTS races CASCADE;\nDROP TABLE IF EXISTS wager_entries CASCADE;\nDROP TABLE IF EXISTS wager_stats CASCADE;\nDROP TABLE IF EXISTS user_sessions CASCADE;\nDROP TABLE IF EXISTS users CASCADE;\n\n-- Users table with comprehensive security and features\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    username VARCHAR(30) NOT NULL UNIQUE,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password_hash TEXT NOT NULL,\n    \n    -- Role and status\n    role VARCHAR(20) NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'admin', 'moderator')),\n    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'deleted')),\n    \n    -- Profile information\n    display_name VARCHAR(100),\n    bio TEXT,\n    avatar TEXT,\n    profile_color VARCHAR(7) DEFAULT '#D7FF00',\n    \n    -- Goated integration\n    goated_id VARCHAR(50) UNIQUE,\n    goated_username VARCHAR(100),\n    goated_linked BOOLEAN DEFAULT FALSE,\n    goated_verified BOOLEAN DEFAULT FALSE,\n    \n    -- Privacy settings (JSONB for flexibility)\n    privacy_settings JSONB DEFAULT '{\n        \"profilePublic\": true,\n        \"showStats\": true,\n        \"showRankings\": true\n    }'::jsonb,\n    \n    -- User preferences\n    preferences JSONB DEFAULT '{\n        \"emailNotifications\": true,\n        \"pushNotifications\": false,\n        \"theme\": \"dark\",\n        \"language\": \"en\"\n    }'::jsonb,\n    \n    -- Email verification\n    email_verified BOOLEAN DEFAULT FALSE,\n    email_verification_token TEXT,\n    email_verification_sent_at TIMESTAMPTZ,\n    \n    -- Security features\n    two_factor_enabled BOOLEAN DEFAULT FALSE,\n    two_factor_secret TEXT,\n    password_reset_token TEXT,\n    password_reset_expires TIMESTAMPTZ,\n    last_password_change TIMESTAMPTZ,\n    \n    -- Activity tracking\n    last_login_at TIMESTAMPTZ,\n    last_active_at TIMESTAMPTZ,\n    login_count INTEGER DEFAULT 0,\n    \n    -- Audit fields\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- User sessions table for secure session management\nCREATE TABLE user_sessions (\n    id TEXT PRIMARY KEY,\n    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    data JSONB,\n    expires_at TIMESTAMPTZ NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    last_accessed_at TIMESTAMPTZ DEFAULT NOW(),\n    ip_address INET,\n    user_agent TEXT\n);\n\n-- Wager statistics table with optimized structure\nCREATE TABLE wager_stats (\n    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,\n    goated_id VARCHAR(50) NOT NULL UNIQUE,\n    username VARCHAR(100) NOT NULL,\n    \n    -- Wager amounts (using DECIMAL for precision)\n    daily_wager DECIMAL(15,2) DEFAULT 0,\n    weekly_wager DECIMAL(15,2) DEFAULT 0,\n    monthly_wager DECIMAL(15,2) DEFAULT 0,\n    all_time_wager DECIMAL(15,2) DEFAULT 0,\n    \n    -- Rankings (indexed for fast leaderboards)\n    daily_rank INTEGER,\n    weekly_rank INTEGER,\n    monthly_rank INTEGER,\n    all_time_rank INTEGER,\n    \n    -- Sync metadata\n    last_sync_at TIMESTAMPTZ DEFAULT NOW(),\n    sync_source VARCHAR(20) DEFAULT 'api' CHECK (sync_source IN ('api', 'manual', 'webhook')),\n    \n    -- Audit fields\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Individual wager entries for detailed tracking\nCREATE TABLE wager_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    goated_id VARCHAR(50) NOT NULL,\n    \n    amount DECIMAL(15,2) NOT NULL CHECK (amount >= 0),\n    currency VARCHAR(3) DEFAULT 'USD',\n    game VARCHAR(100),\n    \n    -- Timing\n    wager_timestamp TIMESTAMPTZ NOT NULL,\n    synced_at TIMESTAMPTZ DEFAULT NOW(),\n    \n    -- Metadata\n    source VARCHAR(20) DEFAULT 'api' CHECK (source IN ('api', 'webhook', 'manual')),\n    verified BOOLEAN DEFAULT FALSE,\n    \n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Wager races table\nCREATE TABLE races (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    type VARCHAR(20) NOT NULL CHECK (type IN ('daily', 'weekly', 'monthly', 'special')),\n    status VARCHAR(20) DEFAULT 'upcoming' CHECK (status IN ('upcoming', 'active', 'completed', 'cancelled')),\n    \n    -- Timing\n    start_time TIMESTAMPTZ NOT NULL,\n    end_time TIMESTAMPTZ NOT NULL,\n    \n    -- Configuration\n    min_wager_amount DECIMAL(15,2) DEFAULT 0,\n    max_participants INTEGER,\n    \n    -- Prizes\n    total_prize_pool DECIMAL(15,2) NOT NULL CHECK (total_prize_pool >= 0),\n    prize_distribution JSONB NOT NULL, -- Array of {position, amount, currency, description}\n    \n    -- Statistics\n    participant_count INTEGER DEFAULT 0,\n    total_wagered DECIMAL(15,2) DEFAULT 0,\n    \n    -- Audit fields\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Race participants table\nCREATE TABLE race_participants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    race_id UUID NOT NULL REFERENCES races(id) ON DELETE CASCADE,\n    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    goated_id VARCHAR(50) NOT NULL,\n    username VARCHAR(100) NOT NULL,\n    \n    -- Performance\n    total_wager DECIMAL(15,2) DEFAULT 0 CHECK (total_wager >= 0),\n    position INTEGER,\n    prize_won DECIMAL(15,2) DEFAULT 0 CHECK (prize_won >= 0),\n    \n    -- Status\n    joined BOOLEAN DEFAULT TRUE,\n    qualified BOOLEAN DEFAULT FALSE,\n    disqualified BOOLEAN DEFAULT FALSE,\n    disqualification_reason TEXT,\n    \n    -- Timing\n    joined_at TIMESTAMPTZ DEFAULT NOW(),\n    last_wager_at TIMESTAMPTZ,\n    \n    UNIQUE(race_id, user_id)\n);\n\n-- Create comprehensive indexes for performance\n\n-- Users indexes\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_goated_id ON users(goated_id) WHERE goated_id IS NOT NULL;\nCREATE INDEX idx_users_status_role ON users(status, role);\nCREATE INDEX idx_users_created_at ON users(created_at);\nCREATE INDEX idx_users_last_active ON users(last_active_at);\n\n-- Full-text search on usernames\nCREATE INDEX idx_users_username_trgm ON users USING gin(username gin_trgm_ops);\nCREATE INDEX idx_users_display_name_trgm ON users USING gin(display_name gin_trgm_ops) WHERE display_name IS NOT NULL;\n\n-- Sessions indexes\nCREATE INDEX idx_sessions_user_id ON user_sessions(user_id);\nCREATE INDEX idx_sessions_expires_at ON user_sessions(expires_at);\n\n-- Wager stats indexes (critical for leaderboards)\nCREATE INDEX idx_wager_stats_daily_rank ON wager_stats(daily_rank) WHERE daily_rank IS NOT NULL;\nCREATE INDEX idx_wager_stats_weekly_rank ON wager_stats(weekly_rank) WHERE weekly_rank IS NOT NULL;\nCREATE INDEX idx_wager_stats_monthly_rank ON wager_stats(monthly_rank) WHERE monthly_rank IS NOT NULL;\nCREATE INDEX idx_wager_stats_all_time_rank ON wager_stats(all_time_rank) WHERE all_time_rank IS NOT NULL;\n\nCREATE INDEX idx_wager_stats_daily_wager ON wager_stats(daily_wager DESC);\nCREATE INDEX idx_wager_stats_weekly_wager ON wager_stats(weekly_wager DESC);\nCREATE INDEX idx_wager_stats_monthly_wager ON wager_stats(monthly_wager DESC);\nCREATE INDEX idx_wager_stats_all_time_wager ON wager_stats(all_time_wager DESC);\n\nCREATE INDEX idx_wager_stats_goated_id ON wager_stats(goated_id);\nCREATE INDEX idx_wager_stats_last_sync ON wager_stats(last_sync_at);\n\n-- Wager entries indexes\nCREATE INDEX idx_wager_entries_user_id ON wager_entries(user_id);\nCREATE INDEX idx_wager_entries_goated_id ON wager_entries(goated_id);\nCREATE INDEX idx_wager_entries_timestamp ON wager_entries(wager_timestamp DESC);\nCREATE INDEX idx_wager_entries_amount ON wager_entries(amount DESC);\nCREATE INDEX idx_wager_entries_synced_at ON wager_entries(synced_at);\n\n-- Race indexes\nCREATE INDEX idx_races_status ON races(status);\nCREATE INDEX idx_races_type ON races(type);\nCREATE INDEX idx_races_start_time ON races(start_time);\nCREATE INDEX idx_races_end_time ON races(end_time);\nCREATE INDEX idx_races_active ON races(status, start_time, end_time) WHERE status = 'active';\n\n-- Race participants indexes\nCREATE INDEX idx_race_participants_race_id ON race_participants(race_id);\nCREATE INDEX idx_race_participants_user_id ON race_participants(user_id);\nCREATE INDEX idx_race_participants_position ON race_participants(race_id, position) WHERE position IS NOT NULL;\nCREATE INDEX idx_race_participants_total_wager ON race_participants(race_id, total_wager DESC);\n\n-- Create triggers for updated_at timestamps\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_wager_stats_updated_at BEFORE UPDATE ON wager_stats FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_races_updated_at BEFORE UPDATE ON races FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Create function for ranking updates\nCREATE OR REPLACE FUNCTION update_wager_rankings(period_type TEXT)\nRETURNS INTEGER AS $$\nDECLARE\n    updated_count INTEGER := 0;\nBEGIN\n    CASE period_type\n        WHEN 'daily' THEN\n            UPDATE wager_stats SET daily_rank = ranked.rank\n            FROM (\n                SELECT user_id, RANK() OVER (ORDER BY daily_wager DESC) as rank\n                FROM wager_stats WHERE daily_wager > 0\n            ) ranked\n            WHERE wager_stats.user_id = ranked.user_id;\n            \n        WHEN 'weekly' THEN\n            UPDATE wager_stats SET weekly_rank = ranked.rank\n            FROM (\n                SELECT user_id, RANK() OVER (ORDER BY weekly_wager DESC) as rank\n                FROM wager_stats WHERE weekly_wager > 0\n            ) ranked\n            WHERE wager_stats.user_id = ranked.user_id;\n            \n        WHEN 'monthly' THEN\n            UPDATE wager_stats SET monthly_rank = ranked.rank\n            FROM (\n                SELECT user_id, RANK() OVER (ORDER BY monthly_wager DESC) as rank\n                FROM wager_stats WHERE monthly_wager > 0\n            ) ranked\n            WHERE wager_stats.user_id = ranked.user_id;\n            \n        WHEN 'all_time' THEN\n            UPDATE wager_stats SET all_time_rank = ranked.rank\n            FROM (\n                SELECT user_id, RANK() OVER (ORDER BY all_time_wager DESC) as rank\n                FROM wager_stats WHERE all_time_wager > 0\n            ) ranked\n            WHERE wager_stats.user_id = ranked.user_id;\n    END CASE;\n    \n    GET DIAGNOSTICS updated_count = ROW_COUNT;\n    RETURN updated_count;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create views for common queries\nCREATE VIEW active_users AS\nSELECT * FROM users \nWHERE status = 'active';\n\nCREATE VIEW verified_users AS\nSELECT * FROM users \nWHERE status = 'active' AND email_verified = TRUE;\n\nCREATE VIEW goated_linked_users AS\nSELECT u.*, ws.* FROM users u\nJOIN wager_stats ws ON u.id = ws.user_id\nWHERE u.goated_linked = TRUE;\n\n-- Insert default admin user (with secure password hash)\n-- Password: 'AdminPassword123!' (should be changed immediately)\nINSERT INTO users (\n    username, \n    email, \n    password_hash, \n    role, \n    email_verified,\n    created_at\n) VALUES (\n    'admin',\n    'admin@goatedvips.gg',\n    '$2b$12$LQv3c1yqBwcVsvUyqrB0R.L2a9M4KhJhWJgZPvIm3pY8QpOI3aBc2', -- AdminPassword123!\n    'admin',\n    TRUE,\n    NOW()\n);\n\n-- Create initial race types as examples\nINSERT INTO races (\n    name,\n    description,\n    type,\n    status,\n    start_time,\n    end_time,\n    total_prize_pool,\n    prize_distribution\n) VALUES \n(\n    'Daily Wager Race',\n    'Daily competition for highest wagerers',\n    'daily',\n    'upcoming',\n    CURRENT_DATE + INTERVAL '1 day',\n    CURRENT_DATE + INTERVAL '2 days',\n    1000.00,\n    '[{\"position\": 1, \"amount\": 500, \"currency\": \"USD\"}, {\"position\": 2, \"amount\": 300, \"currency\": \"USD\"}, {\"position\": 3, \"amount\": 200, \"currency\": \"USD\"}]'::jsonb\n);\n\n-- Grant necessary permissions\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO neondb_owner;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO neondb_owner;\nGRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO neondb_owner;\n\nCOMMIT;"