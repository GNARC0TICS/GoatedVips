import { pgTable, text, varchar, boolean, decimal, integer, uuid, timestamptz, jsonb, index } from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\n\n// Users table\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().default(sql`uuid_generate_v4()`),\n  username: varchar('username', { length: 30 }).notNull().unique(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  passwordHash: text('password_hash').notNull(),\n  \n  role: varchar('role', { length: 20 }).notNull().default('user'),\n  status: varchar('status', { length: 20 }).notNull().default('active'),\n  \n  displayName: varchar('display_name', { length: 100 }),\n  bio: text('bio'),\n  avatar: text('avatar'),\n  profileColor: varchar('profile_color', { length: 7 }).default('#D7FF00'),\n  \n  goatedId: varchar('goated_id', { length: 50 }).unique(),\n  goatedUsername: varchar('goated_username', { length: 100 }),\n  goatedLinked: boolean('goated_linked').default(false),\n  goatedVerified: boolean('goated_verified').default(false),\n  \n  privacySettings: jsonb('privacy_settings').default({\n    profilePublic: true,\n    showStats: true,\n    showRankings: true\n  }),\n  preferences: jsonb('preferences').default({\n    emailNotifications: true,\n    pushNotifications: false,\n    theme: 'dark',\n    language: 'en'\n  }),\n  \n  emailVerified: boolean('email_verified').default(false),\n  emailVerificationToken: text('email_verification_token'),\n  emailVerificationSentAt: timestamptz('email_verification_sent_at'),\n  \n  twoFactorEnabled: boolean('two_factor_enabled').default(false),\n  twoFactorSecret: text('two_factor_secret'),\n  passwordResetToken: text('password_reset_token'),\n  passwordResetExpires: timestamptz('password_reset_expires'),\n  lastPasswordChange: timestamptz('last_password_change'),\n  \n  lastLoginAt: timestamptz('last_login_at'),\n  lastActiveAt: timestamptz('last_active_at'),\n  loginCount: integer('login_count').default(0),\n  \n  createdAt: timestamptz('created_at').default(sql`NOW()`),\n  updatedAt: timestamptz('updated_at').default(sql`NOW()`),\n}, (table) => ({\n  emailIdx: index('idx_users_email').on(table.email),\n  usernameIdx: index('idx_users_username').on(table.username),\n  goatedIdIdx: index('idx_users_goated_id').on(table.goatedId),\n  statusRoleIdx: index('idx_users_status_role').on(table.status, table.role),\n  createdAtIdx: index('idx_users_created_at').on(table.createdAt),\n  lastActiveIdx: index('idx_users_last_active').on(table.lastActiveAt),\n}));\n\n// User sessions table\nexport const userSessions = pgTable('user_sessions', {\n  id: text('id').primaryKey(),\n  userId: uuid('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n  data: jsonb('data'),\n  expiresAt: timestamptz('expires_at').notNull(),\n  createdAt: timestamptz('created_at').default(sql`NOW()`),\n  lastAccessedAt: timestamptz('last_accessed_at').default(sql`NOW()`),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n}, (table) => ({\n  userIdIdx: index('idx_sessions_user_id').on(table.userId),\n  expiresAtIdx: index('idx_sessions_expires_at').on(table.expiresAt),\n}));\n\n// Wager stats table\nexport const wagerStats = pgTable('wager_stats', {\n  userId: uuid('user_id').primaryKey().references(() => users.id, { onDelete: 'cascade' }),\n  goatedId: varchar('goated_id', { length: 50 }).notNull().unique(),\n  username: varchar('username', { length: 100 }).notNull(),\n  \n  dailyWager: decimal('daily_wager', { precision: 15, scale: 2 }).default('0'),\n  weeklyWager: decimal('weekly_wager', { precision: 15, scale: 2 }).default('0'),\n  monthlyWager: decimal('monthly_wager', { precision: 15, scale: 2 }).default('0'),\n  allTimeWager: decimal('all_time_wager', { precision: 15, scale: 2 }).default('0'),\n  \n  dailyRank: integer('daily_rank'),\n  weeklyRank: integer('weekly_rank'),\n  monthlyRank: integer('monthly_rank'),\n  allTimeRank: integer('all_time_rank'),\n  \n  lastSyncAt: timestamptz('last_sync_at').default(sql`NOW()`),\n  syncSource: varchar('sync_source', { length: 20 }).default('api'),\n  \n  createdAt: timestamptz('created_at').default(sql`NOW()`),\n  updatedAt: timestamptz('updated_at').default(sql`NOW()`),\n}, (table) => ({\n  dailyRankIdx: index('idx_wager_stats_daily_rank').on(table.dailyRank),\n  weeklyRankIdx: index('idx_wager_stats_weekly_rank').on(table.weeklyRank),\n  monthlyRankIdx: index('idx_wager_stats_monthly_rank').on(table.monthlyRank),\n  allTimeRankIdx: index('idx_wager_stats_all_time_rank').on(table.allTimeRank),\n  dailyWagerIdx: index('idx_wager_stats_daily_wager').on(table.dailyWager),\n  weeklyWagerIdx: index('idx_wager_stats_weekly_wager').on(table.weeklyWager),\n  monthlyWagerIdx: index('idx_wager_stats_monthly_wager').on(table.monthlyWager),\n  allTimeWagerIdx: index('idx_wager_stats_all_time_wager').on(table.allTimeWager),\n  goatedIdIdx: index('idx_wager_stats_goated_id').on(table.goatedId),\n  lastSyncIdx: index('idx_wager_stats_last_sync').on(table.lastSyncAt),\n}));\n\n// Wager entries table\nexport const wagerEntries = pgTable('wager_entries', {\n  id: uuid('id').primaryKey().default(sql`uuid_generate_v4()`),\n  userId: uuid('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n  goatedId: varchar('goated_id', { length: 50 }).notNull(),\n  \n  amount: decimal('amount', { precision: 15, scale: 2 }).notNull(),\n  currency: varchar('currency', { length: 3 }).default('USD'),\n  game: varchar('game', { length: 100 }),\n  \n  wagerTimestamp: timestamptz('wager_timestamp').notNull(),\n  syncedAt: timestamptz('synced_at').default(sql`NOW()`),\n  \n  source: varchar('source', { length: 20 }).default('api'),\n  verified: boolean('verified').default(false),\n  \n  createdAt: timestamptz('created_at').default(sql`NOW()`),\n}, (table) => ({\n  userIdIdx: index('idx_wager_entries_user_id').on(table.userId),\n  goatedIdIdx: index('idx_wager_entries_goated_id').on(table.goatedId),\n  timestampIdx: index('idx_wager_entries_timestamp').on(table.wagerTimestamp),\n  amountIdx: index('idx_wager_entries_amount').on(table.amount),\n  syncedAtIdx: index('idx_wager_entries_synced_at').on(table.syncedAt),\n}));\n\n// Races table\nexport const races = pgTable('races', {\n  id: uuid('id').primaryKey().default(sql`uuid_generate_v4()`),\n  name: varchar('name', { length: 100 }).notNull(),\n  description: text('description'),\n  type: varchar('type', { length: 20 }).notNull(),\n  status: varchar('status', { length: 20 }).default('upcoming'),\n  \n  startTime: timestamptz('start_time').notNull(),\n  endTime: timestamptz('end_time').notNull(),\n  \n  minWagerAmount: decimal('min_wager_amount', { precision: 15, scale: 2 }).default('0'),\n  maxParticipants: integer('max_participants'),\n  \n  totalPrizePool: decimal('total_prize_pool', { precision: 15, scale: 2 }).notNull(),\n  prizeDistribution: jsonb('prize_distribution').notNull(),\n  \n  participantCount: integer('participant_count').default(0),\n  totalWagered: decimal('total_wagered', { precision: 15, scale: 2 }).default('0'),\n  \n  createdAt: timestamptz('created_at').default(sql`NOW()`),\n  updatedAt: timestamptz('updated_at').default(sql`NOW()`),\n}, (table) => ({\n  statusIdx: index('idx_races_status').on(table.status),\n  typeIdx: index('idx_races_type').on(table.type),\n  startTimeIdx: index('idx_races_start_time').on(table.startTime),\n  endTimeIdx: index('idx_races_end_time').on(table.endTime),\n}));\n\n// Race participants table\nexport const raceParticipants = pgTable('race_participants', {\n  id: uuid('id').primaryKey().default(sql`uuid_generate_v4()`),\n  raceId: uuid('race_id').notNull().references(() => races.id, { onDelete: 'cascade' }),\n  userId: uuid('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n  goatedId: varchar('goated_id', { length: 50 }).notNull(),\n  username: varchar('username', { length: 100 }).notNull(),\n  \n  totalWager: decimal('total_wager', { precision: 15, scale: 2 }).default('0'),\n  position: integer('position'),\n  prizeWon: decimal('prize_won', { precision: 15, scale: 2 }).default('0'),\n  \n  joined: boolean('joined').default(true),\n  qualified: boolean('qualified').default(false),\n  disqualified: boolean('disqualified').default(false),\n  disqualificationReason: text('disqualification_reason'),\n  \n  joinedAt: timestamptz('joined_at').default(sql`NOW()`),\n  lastWagerAt: timestamptz('last_wager_at'),\n}, (table) => ({\n  raceIdIdx: index('idx_race_participants_race_id').on(table.raceId),\n  userIdIdx: index('idx_race_participants_user_id').on(table.userId),\n  positionIdx: index('idx_race_participants_position').on(table.raceId, table.position),\n  totalWagerIdx: index('idx_race_participants_total_wager').on(table.raceId, table.totalWager),\n}));"