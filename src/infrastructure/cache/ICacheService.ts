export interface ICacheService {\n  // Basic operations\n  get<T = any>(key: string): Promise<T | null>;\n  set(key: string, value: any, ttlSeconds?: number): Promise<void>;\n  delete(key: string): Promise<boolean>;\n  exists(key: string): Promise<boolean>;\n  \n  // Advanced operations\n  mget(keys: string[]): Promise<(any | null)[]>;\n  mset(keyValues: Record<string, any>, ttlSeconds?: number): Promise<void>;\n  mdelete(keys: string[]): Promise<number>;\n  \n  // List operations\n  lpush(key: string, ...values: any[]): Promise<number>;\n  rpush(key: string, ...values: any[]): Promise<number>;\n  lpop(key: string): Promise<any | null>;\n  rpop(key: string): Promise<any | null>;\n  lrange(key: string, start: number, stop: number): Promise<any[]>;\n  llen(key: string): Promise<number>;\n  \n  // Set operations\n  sadd(key: string, ...members: any[]): Promise<number>;\n  srem(key: string, ...members: any[]): Promise<number>;\n  smembers(key: string): Promise<any[]>;\n  sismember(key: string, member: any): Promise<boolean>;\n  scard(key: string): Promise<number>;\n  \n  // Hash operations\n  hget(key: string, field: string): Promise<any | null>;\n  hset(key: string, field: string, value: any): Promise<void>;\n  hmget(key: string, fields: string[]): Promise<(any | null)[]>;\n  hmset(key: string, fieldValues: Record<string, any>): Promise<void>;\n  hgetall(key: string): Promise<Record<string, any>>;\n  hdel(key: string, ...fields: string[]): Promise<number>;\n  \n  // TTL operations\n  expire(key: string, seconds: number): Promise<boolean>;\n  ttl(key: string): Promise<number>;\n  persist(key: string): Promise<boolean>;\n  \n  // Pattern operations\n  keys(pattern: string): Promise<string[]>;\n  scan(cursor: number, pattern?: string, count?: number): Promise<{ cursor: number; keys: string[] }>;\n  \n  // Atomic operations\n  incr(key: string): Promise<number>;\n  incrby(key: string, increment: number): Promise<number>;\n  decr(key: string): Promise<number>;\n  decrby(key: string, decrement: number): Promise<number>;\n  \n  // Utility\n  flushall(): Promise<void>;\n  ping(): Promise<string>;\n}"