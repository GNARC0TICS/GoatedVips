#!/usr/bin/env node\n/**\n * Main entry point for Goombas x Goated VIPs v2.0\n * \n * This is a complete rewrite with:\n * - Domain-driven design architecture\n * - Secure authentication with JWT\n * - Redis caching and session management\n * - Comprehensive logging and monitoring\n * - Type-safe API with Zod validation\n * - Optimized database schema\n */\n\nimport 'dotenv/config';\nimport { APIServer } from './api/server';\nimport { getLogger } from './infrastructure/logging/Logger';\nimport { getMetricsCollector } from './infrastructure/monitoring/MetricsCollector';\nimport { MockEmailService } from './infrastructure/email/MockEmailService';\n\n// Initialize logger\nconst logger = getLogger({\n  level: process.env.LOG_LEVEL || (process.env.NODE_ENV === 'production' ? 'info' : 'debug'),\n  enableFile: process.env.NODE_ENV === 'production',\n});\n\n// Configuration from environment\nconst config = {\n  port: parseInt(process.env.PORT || '3000'),\n  host: process.env.HOST || '0.0.0.0',\n  corsOrigins: process.env.CORS_ORIGINS?.split(',') || ['http://localhost:3000', 'http://localhost:5173'],\n  \n  // Database\n  databaseUrl: process.env.DATABASE_URL || 'postgresql://localhost:5432/goombas_vips_v2',\n  \n  // Redis\n  redisHost: process.env.REDIS_HOST || 'localhost',\n  redisPort: parseInt(process.env.REDIS_PORT || '6379'),\n  redisPassword: process.env.REDIS_PASSWORD,\n  \n  // JWT\n  jwtSecret: process.env.JWT_SECRET || 'dev-secret-change-in-production',\n  jwtRefreshSecret: process.env.JWT_REFRESH_SECRET || 'dev-refresh-secret-change-in-production',\n  \n  // Email service (mock for now)\n  emailService: new MockEmailService(),\n};\n\n// Validate critical configuration\nfunction validateConfig() {\n  const requiredVars = [\n    'DATABASE_URL',\n    'JWT_SECRET',\n    'JWT_REFRESH_SECRET',\n  ];\n  \n  const missing = requiredVars.filter(varName => !process.env[varName]);\n  \n  if (missing.length > 0) {\n    logger.error('Missing required environment variables', undefined, {\n      missing,\n      environment: process.env.NODE_ENV,\n    });\n    \n    if (process.env.NODE_ENV === 'production') {\n      process.exit(1);\n    } else {\n      logger.warn('Running in development mode with default values');\n    }\n  }\n  \n  // Warn about insecure defaults in production\n  if (process.env.NODE_ENV === 'production') {\n    const insecureDefaults = [];\n    \n    if (config.jwtSecret === 'dev-secret-change-in-production') {\n      insecureDefaults.push('JWT_SECRET');\n    }\n    \n    if (config.jwtRefreshSecret === 'dev-refresh-secret-change-in-production') {\n      insecureDefaults.push('JWT_REFRESH_SECRET');\n    }\n    \n    if (insecureDefaults.length > 0) {\n      logger.security('Insecure configuration detected in production', {\n        severity: 'critical',\n        variables: insecureDefaults,\n        threat: 'Authentication bypass possible',\n        action: 'Set secure values for production',\n      });\n    }\n  }\n}\n\n// Main startup function\nasync function main() {\n  try {\n    logger.info('Starting Goombas x Goated VIPs v2.0', {\n      version: '2.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      nodeVersion: process.version,\n      pid: process.pid,\n    });\n    \n    // Validate configuration\n    validateConfig();\n    \n    // Initialize metrics collector\n    const metricsCollector = getMetricsCollector();\n    logger.info('Metrics collector initialized');\n    \n    // Create and start server\n    const server = new APIServer(config);\n    await server.start();\n    \n    // Log successful startup\n    logger.info('Server started successfully', {\n      port: config.port,\n      host: config.host,\n      environment: process.env.NODE_ENV,\n    });\n    \n    // Business event\n    logger.business('Application started', {\n      version: '2.0.0',\n      port: config.port,\n    });\n    \n  } catch (error: any) {\n    logger.error('Failed to start server', error, {\n      stack: error.stack,\n      config: {\n        port: config.port,\n        host: config.host,\n        environment: process.env.NODE_ENV,\n      },\n    });\n    \n    process.exit(1);\n  }\n}\n\n// Handle process signals\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM received, starting graceful shutdown');\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('SIGINT received, starting graceful shutdown');\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught exception', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled promise rejection', reason as Error, {\n    promise: promise.toString(),\n  });\n  process.exit(1);\n});\n\n// Start the application\nmain().catch((error) => {\n  logger.error('Application startup failed', error);\n  process.exit(1);\n});"